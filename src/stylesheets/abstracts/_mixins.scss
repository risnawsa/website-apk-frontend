// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------


/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self (false) - Whether or not to include current selector
/// @see https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
    @if $self {
        &,
        &:hover,
        &:active,
        &:focus {
            @content;
        }
    } @else {
        &:hover,
        &:active,
        &:focus {
            @content;
        }
    }
}

/// Contexts
/// @author Hugo Giraudel
/// @param {String | List} $context
@mixin when-inside($context) {
    #{$context} & {
        @content;
    }
}

/// BEM Methodology
/// @access public
/// @param {String} $element - Element's name
@mixin e($element) {
    &__#{$element} {
      @content;
    }
}

/// @param {String} $modifier - Modifier's name
@mixin m($modifier) {
    &--#{$modifier} {
        @content;
    }
}

/// Mixin to manage responsive breakpoints
@mixin respond-between($lower, $upper) {

    // If both the lower and upper breakpoints exist in the map.
    @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {

      // Get the lower and upper breakpoints.
      $lower-breakpoint: map-get($breakpoints, $lower);
      $upper-breakpoint: map-get($breakpoints, $upper);

      // Write the media query.
    //   @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 0.02)) {
      @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint)) {
        @content;
      }

    // If one or both of the breakpoints don't exist.
    } @else {

      // If lower breakpoint is invalid.
      @if (map-has-key($breakpoints, $lower) == false) {

        // Log a warning.
        @warn 'Your lower breakpoint was invalid: #{$lower}.';
      }

      // If upper breakpoint is invalid.
      @if (map-has-key($breakpoints, $upper) == false) {

        // Log a warning.
        @warn 'Your upper breakpoint was invalid: #{$upper}.';
      }
    }
}

@mixin respond-between-lg($lower, $upper) {

    // If both the lower and upper breakpoints exist in the map.
    @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {

      // Get the lower and upper breakpoints.
      $lower-breakpoint: map-get($breakpoints, $lower);
      $upper-breakpoint: map-get($breakpoints, $upper);

      // Write the media query.
      @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 90.02)) {
        @content;
      }

    // If one or both of the breakpoints don't exist.
    } @else {

      // If lower breakpoint is invalid.
      @if (map-has-key($breakpoints, $lower) == false) {

        // Log a warning.
        @warn 'Your lower breakpoint was invalid: #{$lower}.';
      }

      // If upper breakpoint is invalid.
      @if (map-has-key($breakpoints, $upper) == false) {

        // Log a warning.
        @warn 'Your upper breakpoint was invalid: #{$upper}.';
      }
    }
}

/// Mixin to manage responsive breakpoints
/// @author Hugo Giraudel
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints
@mixin respond-min($breakpoint) {
    // If the key exists in the map
    @if map-has-key($breakpoints, $breakpoint) {
      // Prints a media query based on the value
      @media (min-width: map-get($breakpoints, $breakpoint)) {
        @content;
      }
    }

    // If the key doesn't exist in the map
    @else {
      @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
          + "Available breakpoints are: #{map-keys($breakpoints)}.";
    }
}

/// Mixin to manage responsive breakpoints
/// @author Hugo Giraudel
/// @param {String} $breakpoint - Breakpoint name
/// @require $breakpoints
@mixin respond-max($breakpoint) {
    // If the key exists in the map
    @if map-has-key($breakpoints, $breakpoint) {
      // Prints a media query based on the value
      @media (max-width: map-get($breakpoints, $breakpoint)) {
        @content;
      }
    }

    // If the key doesn't exist in the map
    @else {
      @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
          + "Available breakpoints are: #{map-keys($breakpoints)}.";
    }
}
